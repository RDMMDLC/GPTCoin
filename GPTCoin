#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <sstream>
#include <iomanip>
#include <map>
#include <random>

using namespace std;

// Definición de la clase Transacción
class Transaccion {
private:
    string remitente;
    string destinatario;
    double cantidad;

public:
    Transaccion(string remitente, string destinatario, double cantidad);

    string getRemitente();
    string getDestinatario();
    double getCantidad();
};

// Constructor de la clase Transacción
Transaccion::Transaccion(string remitente, string destinatario, double cantidad) {
    this->remitente = remitente;
    this->destinatario = destinatario;
    this->cantidad = cantidad;
}

string Transaccion::getRemitente() {
    return this->remitente;
}

string Transaccion::getDestinatario() {
    return this->destinatario;
}

double Transaccion::getCantidad() {
    return this->cantidad;
}

// Definición de la clase Bloque
class Bloque {
private:
    int index;
    size_t hashAnterior;
    size_t hash;
    time_t tiempo;
    vector<Transaccion> transacciones;
    int dificultad;
    int nonce;

public:
    Bloque(int index, size_t hashAnterior, int dificultad);

    size_t calcularHash();
    void minarBloque();
    void agregarTransaccion(Transaccion transaccion);
    void mostrarTransacciones();
};

// Constructor de la clase Bloque
Bloque::Bloque(int index, size_t hashAnterior, int dificultad) {
    this->index = index;
    this->hashAnterior = hashAnterior;
    this->tiempo = time(nullptr);
    this->dificultad = dificultad;
    this->nonce = 0;
}

// Función que calcula el hash del bloque
size_t Bloque::calcularHash() {
    stringstream ss;
    ss << index << hashAnterior << tiempo << nonce;

    size_t hash = hash<string>{}(ss.str());

    for (int i = 0; i < transacciones.size(); i++) {
        hash ^= hash<string>{}(transacciones[i].getRemitente() + transacciones[i].getDestinatario() + to_string(transacciones[i].getCantidad()));
    }

    return hash;
}

// Función que realiza la minería del bloque
void Bloque::minarBloque() {
    vector<char> objetivo(dificultad + 1);
    objetivo[0] = '0';
    for (int i = 1; i < objetivo.size(); i++) {
        objetivo[i] = '0';
    }

    string hashCalculado = "";
    int intentos = 0;
    time_t inicio = time(nullptr);

    do {
        nonce++;
        hashCalculado = calcularHash();
        intentos++;
    } while (hashCalculado.substr(0, dificultad) != string(objetivo.begin(), objetivo.end()));

    time_t fin = time(nullptr);
    double tiempoTotal = difftime(fin, inicio);

    cout << "Bloque minado en " << fixed << setprecision(2) << tiempoTotal << " segundos. Hash: " << hashCalculado << endl;
    
// Limpiar el vector de transacciones
transacciones.clear();

}

// Función para agregar una transacción al bloque
void Bloque::agregarTransaccion(Transaccion transaccion) {
transacciones.push_back(transaccion);
}

// Función para mostrar las transacciones en un bloque
void Bloque::mostrarTransacciones() {
for (int i = 0; i < transacciones.size(); i++) {
cout << "Remitente: " << transacciones[i].getRemitente() << endl;
cout << "Destinatario: " << transacciones[i].getDestinatario() << endl;
cout << "Cantidad: " << transacciones[i].getCantidad() << endl;
cout << endl;
}
}

// Definición de la clase Blockchain
class Blockchain {
private:
vector<Bloque> cadena;
int dificultad;
map<string, double> saldos;

public:
Blockchain(int dificultad);

void agregarBloque(Bloque bloque, string remitente, string destinatario, double cantidad);
void mostrarCadena();
bool validarCadena();
double obtenerSaldo(string direccion);

};

// Constructor de la clase Blockchain
Blockchain::Blockchain(int dificultad) {
this->dificultad = dificultad;
Bloque bloqueGenesis(0, 0, dificultad);
cadena.push_back(bloqueGenesis);
}

// Función para agregar un bloque a la cadena
void Blockchain::agregarBloque(Bloque bloque, string remitente, string destinatario, double cantidad) {
Transaccion transaccion(remitente, destinatario, cantidad);
bloque.agregarTransaccion(transaccion);
bloque.minarBloque();
cadena.push_back(bloque);

// Actualizar los saldos de los remitentes y destinatarios
if (saldos.find(remitente) == saldos.end()) {
    saldos[remitente] = 0.0;
}
if (saldos.find(destinatario) == saldos.end()) {
    saldos[destinatario] = 0.0;
}
saldos[remitente] -= cantidad;
saldos[destinatario] += cantidad;

}

// Función para mostrar la cadena de bloques
void Blockchain::mostrarCadena() {
for (int i = 0; i < cadena.size(); i++) {
cout << "Bloque " << i << endl;
cout << "Hash anterior: " << cadena[i].getHashAnterior() << endl;
cout << "Hash: " << cadena[i].getHash() << endl;
cout << "Tiempo: " << ctime(&cadena[i].getTiempo()) << endl;
cout << "Transacciones:" << endl;
cadena[i].mostrarTransacciones();
cout << endl;
}
}

// Función para validar la cadena de bloques
bool Blockchain::validarCadena() {
for (int i = 1; i < cadena.size(); i++) {
Bloque bloqueActual = cadena[i];
Bloque bloqueAnterior = cadena[i - 1];

    if (bloqueActual.get
